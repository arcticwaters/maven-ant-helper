<?xml version="1.0"?>

<project name="pkg-java" default="package" basedir=".">

    <!--
       maven-build.xml - an Ant build script that reproduces the Maven build life-cycle.

       You can use the following properties when launching this script:
       
       basedir: you need to supply the basedir, otherwise Ant will use the current location of this script,
         which is not what you want. For example, use: 
           DEB_ANT_ARGS := -Dpackage=$(realpath .)
       package: the name of the source package. For example, use: 
           DEB_ANT_ARGS := -Dversion=$(DEB_SOURCE_PACKAGE) 
       bin.package: the name of the binary package. Defaults to lib${package}-java
       version: the version of the project, used in the name of the jar. Prefer to use the Debian version 
         here as it makes the rules file easier to write when the version contains alpha, beta or rc versions.
         For example, use: 
           DEB_ANT_ARGS := -Dversion=$(DEB_UPSTREAM_VERSION) 
       debian.dir: the location of the debian directory. Defaults to ${basedir}/debian
       project.dir: the location of the current project. Defaults to ""
       pom.name: the name of the pom file. Must appear as it is in the debian/${bin.package}.poms file
       pom.file: the location of the pom file. Defaults to ${pom.name}
       maven.generate.target: if set, calls Maven with the given target before compiling code. For example, use
          maven.generate.target = plugin:generate to generate the plugin descriptor for a Maven plugin.
       maven.generate.target2: if set, calls Maven with another given target before compiling code. For example, use
          maven.generate.target2 = org.codehaus.plexus:plexus-component-metadata:${plexus-component-metadata.version}:generate-metadata
          to generate the Plexus components descriptor.
       maven.package.target: if set, calls Maven with the given target after packaging the jar. For example, use
          maven.target.target = shade:shade to use the shade plugin and repackage the contents of the jar.
       keep-cleaned-pom: if set, keeps the cleaned pom after packaging. If can be restored later by calling
          maven-build.xml with the restore-pom target (without the keep-cleaned-pom property set).
       use-local-repo: if set, then Maven will use a local repository copied from /usr/share/maven-repo into
          debian/tmp. This allows you to install some custom or intermediate artifacts, handy for multi modules builds.
       dependency, dependency2, dependency3...: Give the name of the dependent packages. Those packages will be
          used to form the links to the Javadoc APIs from the generated Javadoc. 
          The links are of the form: file:///usr/share/doc/${dependency}/api
          Up to 15 dependencies can be defined here. Example use:
            dependency=libcommons-lang-java
            dependency2=libcommons-logging-java

       If you provide a pom file to your project, or the project already contains a pom file,
       then it will be read. You need to add /usr/share/java/ant-nodeps.jar to the classpath
       for this functionality to work.
 
       When using the Maven target, you need to add libmaven2-core-java to Build-Depends, as well as the
       library containing the Maven plugin to execute (libmaven-plugin-tools-java for plugin:generate, 
       libplexus-component-metadata-java for org.codehaus.plexus:plexus-component-metadata:generate-metadata)
     -->

    <property name="bin.package" value="lib${package}-java" />
    <property name="debian.dir" value="${basedir}/debian" />
    <property name="project.dir" value="" />
    <property file="${debian.dir}/build.properties"/>
    <property file="/usr/share/maven-ant-helper/maven-defaults.properties"/>
    <property name="xml-input-factory" value="com.bea.xml.stream.MXParserFactory" />
    <property name="xml-output-factory" value="com.bea.xml.stream.XMLOutputFactoryBase" />

    <target name="init.pom">
        <condition property="use-local-repo" value="true">
            <isset property="maven.package.target" />
        </condition>
        <condition property="pom.file" value="pom.xml">
            <not>
                <isset property="pom.name" />
            </not>
        </condition>
        <condition property="pom.name" value="pom.xml" else="${project.dir}/pom.xml">
            <equals arg1="" arg2="${project.dir}" />
        </condition>
        <property name="pom.file" value="${pom.name}" />
        <available property="available.pom" file="${pom.file}"/>

        <echo message="Base dir is ${basedir}" />
        <echo message="Pom name in ${bin.package}.poms: ${pom.name}" />
        <echo message="Pom file ${pom.file} available? ${available.pom}" />

        <path id="repo-helper.classpath">
          <fileset dir="/usr/share/maven-repo">
            <include name="org/debian/maven/maven-repo-helper/debian/maven-repo-helper-debian.jar" />
            <include name="stax/stax-api/debian/stax-api-debian.jar" />
            <include name="stax/stax/debian/stax-debian.jar" />
            <include name="xml-apis/xml-apis/debian/xml-apis-debian.jar" />
          </fileset>
        </path>

        <path id="maven.classpath">
          <pathelement location="/usr/share/maven-ant-helper/bootstrap"/>
          <fileset dir="/usr/share/maven-repo">
            <include name="backport-util-concurrent/backport-util-concurrent/debian/backport-util-concurrent-debian.jar"/>
            <include name="classworlds/classworlds/debian/classworlds-debian.jar"/>
            <include name="com/jcraft/jsch/debian/jsch-debian.jar"/>
            <include name="commons-cli/commons-cli/debian/commons-cli-debian.jar"/>
            <include name="junit/junit/debian/junit-debian.jar"/>
            <include name="xml-apis/xml-apis/debian/xml-apis-debian.jar"/>
            <include name="org/apache/maven/doxia/doxia-logging-api/debian/doxia-logging-api-debian.jar"/>
            <include name="org/apache/maven/doxia/doxia-sink-api/debian/doxia-sink-api-debian.jar"/>
            <include name="org/apache/maven/maven-artifact/debian/maven-artifact-debian.jar"/>
            <include name="org/apache/maven/maven-artifact-manager/debian/maven-artifact-manager-debian.jar"/>
            <include name="org/apache/maven/maven-core/debian/maven-core-debian.jar"/>
            <include name="org/apache/maven/maven-error-diagnostics/debian/maven-error-diagnostics-debian.jar"/>
            <include name="org/apache/maven/maven-model/debian/maven-model-debian.jar"/>
            <include name="org/apache/maven/maven-monitor/debian/maven-monitor-debian.jar"/>
            <include name="org/apache/maven/maven-plugin-api/debian/maven-plugin-api-debian.jar"/>
            <include name="org/apache/maven/maven-plugin-descriptor/debian/maven-plugin-descriptor-debian.jar"/>
            <include name="org/apache/maven/maven-plugin-parameter-documenter/debian/maven-plugin-parameter-documenter-debian.jar"/>
            <include name="org/apache/maven/maven-plugin-registry/debian/maven-plugin-registry-debian.jar"/>
            <include name="org/apache/maven/maven-profile/debian/maven-profile-debian.jar"/>
            <include name="org/apache/maven/maven-project/debian/maven-project-debian.jar"/>
            <include name="org/apache/maven/maven-repository-metadata/debian/maven-repository-metadata-debian.jar"/>
            <include name="org/apache/maven/maven-settings/debian/maven-settings-debian.jar"/>
            <include name="org/apache/maven/reporting/maven-reporting-api/debian/maven-reporting-api-debian.jar"/>
            <include name="org/apache/maven/wagon/wagon-provider-api/debian/wagon-provider-api-debian.jar"/>
            <include name="org/apache/maven/wagon/wagon-ssh-common/debian/wagon-ssh-common-debian.jar"/>
            <include name="org/apache/maven/wagon/wagon-ssh/debian/wagon-ssh-debian.jar"/>
            <include name="org/codehaus/plexus/plexus-container-default/1.0-alpha/plexus-container-default-1.0-alpha.jar"/>
            <include name="org/codehaus/plexus/plexus-interactivity-api/debian/plexus-interactivity-api-debian.jar"/>
            <include name="org/codehaus/plexus/plexus-interpolation/debian/plexus-interpolation-debian.jar"/>
            <include name="org/codehaus/plexus/plexus-utils/debian/plexus-utils-debian.jar"/>
            <include name="org/sonatype/plexus/plexus-cipher/debian/plexus-cipher-debian.jar"/>
            <include name="org/sonatype/plexus/plexus-sec-dispatcher/debian/plexus-sec-dispatcher-debian.jar"/>
          </fileset>
        </path>

    </target>

    <!-- /usr/share/java/ant-nodeps.jar must be in the classpath -->
    <target name="read.pom" depends="init.pom" if="available.pom">

        <loadfile srcfile="${debian.dir}/${bin.package}.poms" property="cleaner.options">
            <filterchain>
               <linecontains>
                   <contains value="${pom.name}" />
               </linecontains>
               <tokenfilter>
                 <containsregex
                     pattern="[^ ]*(.*)"
                     replace="\1"/>
               </tokenfilter>
               <striplinebreaks/>
            </filterchain>
        </loadfile>
        <!-- default empty value -->
        <property name="cleaner.options" value=""/>
        <echo message="Cleaner options: ${cleaner.options}" />

        <mkdir dir="${debian.dir}/tmp" /> 
        <delete>
           <fileset dir="${debian.dir}/tmp">
              <include name="pom.xml" />
              <include name="pom.properties" />
           </fileset>
        </delete> 

        <property name="pom.loc" location="${pom.file}" />
        <echo message="Cleaning pom ${pom.loc}" />

        <java fork="true" dir="." 
           classname="org.debian.maven.repo.POMCleaner">
           <classpath refid="repo-helper.classpath"/>
           <sysproperty key="javax.xml.stream.XMLInputFactory" value="${xml-input-factory}" />
           <sysproperty key="javax.xml.stream.XMLOutputFactory" value="${xml-output-factory}" />
           <arg value="-p${bin.package}" />
           <arg value="-r${debian.dir}/maven.rules" />
           <arg value="-i${debian.dir}/maven.publishedRules" />
           <arg value="--verbose" />
           <arg line="${cleaner.options} --keep-pom-version" />
           <arg value="${pom.loc}" />
           <arg value="${debian.dir}/tmp/pom.xml" />
           <arg value="${debian.dir}/tmp/pom.properties" />
        </java> 
        <copy file="${pom.file}" tofile="${pom.file}.save" />
        <!-- force the pom file to be located in the current dir, we'll need it when running Maven plugins -->
        <copy file="${debian.dir}/tmp/pom.xml" tofile="${pom.file}" overwrite="true" />
        <property file="${debian.dir}/tmp/pom.properties"/>

        <echo message="Properties read from the POM file:" />
        <echo message="  groupId: ${groupId}" />
        <echo message="  artifactId: ${artifactId}" />
    </target>

    <target name="init" depends="read.pom">
        <available property="available.sources" file="${build.sourceDirectory}"/>
        <available property="available.resources" file="${build.resourcesDirectory}"/>
        <available property="available.testResources" file="${build.testResourcesDirectory}"/>
        <available property="available.testSources" file="${build.testSourceDirectory}"/>

        <fail unless="artifactId" message="Missing required property: artifactId"/>
        <fail unless="version" message="Missing required property: version"/>
        <fail unless="basedir" message="Missing required property: basedir"/>

        <echo message="Compile classpath: ${classpath.full.compile}"/>
        <echo message="Test classpath: ${classpath.full.test}"/>
    </target>

    <!--
     | LIFECYCLE: Clean
     |-->

    <target name="clean">
        <delete dir="${build.directory}"/>
    </target>

    <!--
     | LIFECYCLE: jar
     |
     | This mimics the default Maven build life-cycle: http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
     |-->

     <target name="process-resources" depends="init" if="available.resources">
        <mkdir dir="${build.outputDirectory}"/>
        <copy todir="${build.outputDirectory}">
            <fileset dir="${build.resourcesDirectory}"/>
        </copy>
     </target>

    <target name="process-pom" depends="init" if="available.pom">
        <mkdir dir="${build.outputDirectory}/META-INF/maven/${groupId}/${artifactId}"/>
        <copy todir="${build.outputDirectory}/META-INF/maven/${groupId}/${artifactId}">
            <fileset dir="${debian.dir}/tmp">
               <include name="pom.xml" />
               <include name="pom.properties" />
            </fileset>
        </copy>
    </target>

    <macrodef name="run-maven">
      <attribute name="target"/>
      <sequential>
        <java fork="true" dir="." classname="org.apache.maven.cli.MavenCli" failonerror="true">
          <jvmarg value="-Xmx256M"/>
          <classpath refid="maven.classpath"/>
          <arg value="-Dmaven.test.skip"/>
          <arg value="--offline"/>
          <arg value="-e"/>
          <arg value="-B"/>
          <arg value="-s${debian.dir}/maven-settings.xml"/>
          <arg value="@{target}"/>
        </java>
      </sequential>      
    </macrodef>

    <macrodef name="run-maven-local-repo">
      <attribute name="target"/>
      <sequential>
        <mkdir dir="${debian.dir}/tmp/maven-repo" /> 
        <copy todir="${debian.dir}/tmp/maven-repo">
            <fileset dir="/usr/share/maven-repo" />
        </copy>

        <java fork="true" dir="." classname="org.apache.maven.cli.MavenCli" failonerror="true">
          <jvmarg value="-Xmx256M"/>
          <classpath refid="maven.classpath"/>
          <arg value="-Dmaven.test.skip"/>
          <arg value="--offline"/>
          <arg value="-e"/>
          <arg value="-B"/>
          <arg value="--offline"/>
          <arg value="-Dmaven.repo.local=${debian.dir}/tmp/maven-repo"/>
          <arg value="@{target}"/>
        </java>
      </sequential>      
    </macrodef>

    <target name="mvn-shared-repo" unless="use-local-repo">
        <!-- Calls mvn ${maven.generate.target} -->
        <run-maven target="${_target}" />
    </target>
    <target name="mvn-local-repo" if="use-local-repo">
        <!-- Calls mvn ${maven.generate.target} -->
        <run-maven-local-repo target="${_target}" />
    </target>
    <target name="mvn" depends="mvn-shared-repo,mvn-local-repo" />

    <target name="mvn-generate" depends="init" if="maven.generate.target">
        <antcall target="mvn" inheritRefs="true">
            <param name="_target" value="${maven.generate.target}" />
        </antcall> 
    </target>

    <target name="mvn-generate2" depends="init" if="maven.generate.target2">
        <antcall target="mvn" inheritRefs="true">
            <param name="_target" value="${maven.generate.target2}" />
        </antcall> 
    </target>

    <target name="compile" depends="process-resources,process-pom,mvn-generate,mvn-generate2" if="available.sources">
        <mkdir dir="${build.outputDirectory}"/>
        <mkdir dir="${build.directory}/generated-sources"/>
        <javac
            destdir="${build.outputDirectory}"
            classpath="${classpath.compile}"
            nowarn="true"
            source="${build.javaVersion}" target="${build.javaVersion}"
            debug="on">
            <src path="${build.sourceDirectory}"/>
            <src path="${build.directory}/generated-sources"/>
        </javac>
    </target>

    <target name="process-test-resources" depends="compile" if="available.testResources" unless="maven.test.skip">
        <mkdir dir="${build.testOutputDirectory}"/>
        <copy todir="${build.testOutputDirectory}">
            <fileset dir="${build.testResourcesDirectory}"/>
        </copy>
     </target>

    <target name="test-compile" depends="process-test-resources" if="available.testSources" unless="maven.test.skip">
        <mkdir dir="${build.testOutputDirectory}"/>
        <javac
            destdir="${build.testOutputDirectory}"
            classpath="${classpath.full.test}"
            nowarn="true"
            source="${build.javaVersion}" target="${build.javaVersion}"
            debug="on">
            <src path="${build.testSourceDirectory}"/>
        </javac>
    </target>

    <target name="test" depends="test-compile" unless="maven.test.skip">
        <mkdir dir="${build.directory}/test-output"/>
        <junit printsummary="yes" haltonfailure="no"> <!--  fork="yes" forkmode="once" -->
            <sysproperty key="basedir" value="${basedir}"/>
            <classpath>
                <pathelement path="${classpath.full.test}"/>
            </classpath>

            <formatter type="plain"/>
            <batchtest todir="${build.directory}/test-output">
                <fileset dir="${build.testSourceDirectory}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Abstract*"/>
                    <exclude name="${maven.test.exclude}"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="jar" depends="test">
        <jar jarfile="${build.directory}/${artifactId}-${version}.jar"
            basedir="${build.outputDirectory}"
            manifest="${manifest}" />
    </target>

    <target name="mvn-package" depends="jar" if="maven.package.target">
        <!-- do a POM transform in order to keep important plugin configuration for Maven -->
        <delete file="${pom.file}" />
        <echo message="Transform ${pom.file}" />
        <java fork="true" dir="." 
           classname="org.debian.maven.repo.POMCleaner">
           <classpath refid="repo-helper.classpath"/>
           <sysproperty key="javax.xml.stream.XMLInputFactory" value="${xml-input-factory}" />
           <sysproperty key="javax.xml.stream.XMLOutputFactory" value="${xml-output-factory}" />
           <arg value="-p${bin.package}" />
           <arg value="-r${debian.dir}/maven.rules" />
           <arg value="-i${debian.dir}/maven.publishedRules" />
           <arg value="--verbose" />
           <arg value="--keep-all-elements" />
           <arg line="${cleaner.options} --keep-pom-version" />
           <arg value="${pom.file}.save" />
           <arg value="${pom.file}" />
           <arg value="${debian.dir}/tmp/pom.properties" />
        </java> 
        <!-- Calls mvn ${maven.package.target} -->
        <run-maven-local-repo target="${maven.package.target}" />
    </target>

    <target name="restore-pom" depends="init.pom" unless="keep-cleaned-pom"> 
        <!-- restore the pom file -->
        <copy file="${pom.file}.save" tofile="${pom.file}" overwrite="true"/>
    </target>
 
    <target name="package" depends="jar,mvn-package,restore-pom" />

    <macrodef name="prepare-package-list">
       <attribute name="package" />
       <sequential>
         <mkdir dir="${build.directory}/@{package}" />
         <copy todir="${build.directory}/@{package}"> 
           <fileset dir="/usr/share/doc">
             <include name="@{package}/api/package*list" />
           </fileset>
         </copy>
         <gunzip src="/usr/share/doc/@{package}/api/package-list.gz" dest="${build.directory}/@{package}" /> 
       </sequential>
    </macrodef>

    <!--
     | Javadoc
     |-->

    <target name="javadoc">
        <mkdir dir="${javadoc.dir}"/>
        <prepare-package-list package="openjdk-6-doc" />
        <javadoc 
            source="${build.javaVersion}"
            sourcepath="${build.sourceDirectory}"
            destdir="${javadoc.dir}"
            author="true"
            version="true"
            windowtitle="${package} API"
            doctitle="${package} - ${version}"
            classpath="${classpath.full.compile}" >

            <packageset dir="${build.sourceDirectory}" defaultexcludes="yes">
                <include name="**"/>
            </packageset>
            <link href="file:///usr/share/doc/openjdk-6-doc/api" packagelistLoc="${build.directory}/openjdk-6-doc" />
            <link href="file:///usr/share/doc/classpath-doc/api" />
            <link href="file:///usr/share/doc/${dependency}/api" />
            <link href="file:///usr/share/doc/${dependency2}/api" />
            <link href="file:///usr/share/doc/${dependency3}/api" />
            <link href="file:///usr/share/doc/${dependency4}/api" />
            <link href="file:///usr/share/doc/${dependency5}/api" />
            <link href="file:///usr/share/doc/${dependency6}/api" />
            <link href="file:///usr/share/doc/${dependency7}/api" />
            <link href="file:///usr/share/doc/${dependency8}/api" />
            <link href="file:///usr/share/doc/${dependency9}/api" />
            <link href="file:///usr/share/doc/${dependency10}/api" />
            <link href="file:///usr/share/doc/${dependency11}/api" />
            <link href="file:///usr/share/doc/${dependency12}/api" />
            <link href="file:///usr/share/doc/${dependency13}/api" />
            <link href="file:///usr/share/doc/${dependency14}/api" />
            <link href="file:///usr/share/doc/${dependency15}/api" />
        </javadoc>
    </target>
</project>
